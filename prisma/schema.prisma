generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  login     String    @unique
  password  String
  firstName String?
  name      String?
  role      RoleEnum  @default(USER)
  Basket    Basket?
  product   Product[]

  //Где soft-delete ?
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  update_at  DateTime? //@updatedAt
  delete_at  DateTime?
  products   Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  image       String?
  description String
  price       Float
  caliber     String
  length      String
  shop        String
  created_at  DateTime  @default(now())
  update_at   DateTime?
  delete_at   DateTime?
  Category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  basket      Basket[]
  User        User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
}

//У тебя в корзине будет только один товар Или у тебя будет несколько корзин??? Снизу более правильная реализация под данный кейс

// model Basket {
//   id         Int       @id @default(autoincrement())
//   userId     Int?      @unique

//   created_at DateTime  @default(now())
//   update_at  DateTime?
//   delete_at  DateTime?
  
//   User       User?     @relation(fields: [userId], references: [id])
// }

// model BasketProduct {
//   id         Int       @id @default(autoincrement())
//   basket_id   Int
//   product_id Int
//   count      Int

//   created_at DateTime  @default(now())
//   update_at  DateTime?
//   delete_at  DateTime?
  
//   Basket     Basket      @relation(fields: [basket_id], references: [id])
//   Product    Product     @relation(fields: [product_id], references: [id])
// }

model Basket {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?      @unique
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  Int?
  count      Int
  created_at DateTime  @default(now())
  update_at  DateTime?
  delete_at  DateTime?
}



enum RoleEnum {
  USER
  SELLER
  ADMIN
}
